from datetime import datetime
import pandas as pd
from django.db import transaction

def compute():
    today = pd.to_datetime(datetime.today().date())
    data = {"IT_PULLOUT": []}
    supplyon, pullout = call_data(supplyon_bmw, data)

    supplyon['delivery_date'] = pd.to_datetime(
        supplyon['delivery_date'].replace('Backorder', pd.NaT), errors='coerce'
    )
    supplyon = supplyon.dropna(subset=['delivery_date'])
    supplyon['delivery_quantity'] = pd.to_numeric(supplyon['delivery_quantity'], errors='coerce').fillna(0)

    pullout['con_date'] = pd.to_datetime(pullout['con_date'], errors='coerce')
    pullout['FKIMG'] = pd.to_numeric(pullout['FKIMG'], errors='coerce').fillna(0)
    pullout.loc[
        (pullout['con_date'].notna()) & (pullout['con_date'] < today) & (pullout['RECEP_FLG'] != 'X'),
        'RECEP_FLG'
    ] = 'X'

    blg_df = pullout[pullout['RECEP_FLG'] == 'X'].groupby('buyer_article_no', as_index=False)['FKIMG'].sum()
    blg_df = blg_df.rename(columns={'FKIMG': 'total_blg'})

    supplyon = supplyon[supplyon['delivery_date'] >= today]
    supplyon_sorted = supplyon.sort_values(['buyer_article_no', 'delivery_date'])

    update_records = []

    for article, group in supplyon_sorted.groupby('buyer_article_no', sort=False):
        group = group.sort_values('delivery_date')
        total_blg = blg_df.loc[blg_df['buyer_article_no'] == article, 'total_blg']
        current_stock = int(total_blg.iloc[0]) if not total_blg.empty else 0

        future_pullout = pullout[
            (pullout['buyer_article_no'] == article) &
            (pullout['RECEP_FLG'] != 'X') &
            (pullout['con_date'] > today)
        ].drop_duplicates(subset=['con_date']).sort_values('con_date')

        con_dates = future_pullout['con_date'].tolist()
        fkimgs = future_pullout['FKIMG'].tolist()

        group['blg_warehouse_stock'] = None
        group['git_qty'] = 0
        group['next_git_wh_qty'] = 0
        group['next_git_wh_date'] = pd.NaT

        row_index = 0

        for i, con_date in enumerate(con_dates):
            if i >= len(fkimgs):
                break
            fkimg = int(fkimgs[i])
            git_qty = sum(map(int, fkimgs[i:]))
            next_git_qty = fkimgs[i+1] if i+1 < len(fkimgs) else 0
            next_git_date = con_dates[i+1] if i+1 < len(con_dates) else None

            con_month = con_date.to_period('M')
            rows_in_con = group[group['delivery_date'] <= con_date]

            for idx, row in rows_in_con.iterrows():
                # First future row = assign total_blg
                if row_index == 0:
                    stock_to_assign = current_stock
                else:
                    stock_to_assign = current_stock

                # Add next_git_wh_qty at first delivery of the month of next con_date
                if next_git_date and row['delivery_date'].to_period('M') == next_git_date.to_period('M'):
                    stock_to_assign += next_git_qty
                    next_git_qty_used = next_git_qty
                    next_git_date_used = next_git_date
                else:
                    next_git_qty_used = 0
                    next_git_date_used = pd.NaT

                rec = supplyon_bmw.objects.get(pk=row['id'])
                rec.blg_warehouse_stock = max(0, int(stock_to_assign))
                rec.git_qty = int(git_qty)
                rec.next_git_wh_qty = int(next_git_qty_used)
                rec.next_git_wh_date = next_git_date_used

                latest = bmw_warehouse.objects.filter(buyer_article_no=article).order_by('-entry_date').first()
                rec.warehouse_stock = int(latest.warehouse_qty) if latest else 0

                current_stock -= row['delivery_quantity']
                update_records.append(rec)
                row_index += 1

            group = group[group['delivery_date'] > con_date]

        # Remaining rows after all con_dates
        for idx, row in group.iterrows():
            rec = supplyon_bmw.objects.get(pk=row['id'])
            rec.blg_warehouse_stock = max(0, int(current_stock))
            rec.git_qty = 0
            rec.next_git_wh_qty = 0
            rec.next_git_wh_date = pd.NaT

            latest = bmw_warehouse.objects.filter(buyer_article_no=article).order_by('-entry_date').first()
            rec.warehouse_stock = int(latest.warehouse_qty) if latest else 0

            current_stock -= row['delivery_quantity']
            update_records.append(rec)

    if update_records:
        with transaction.atomic():
            supplyon_bmw.objects.bulk_update(
                update_records,
                ["blg_warehouse_stock", "git_qty", "next_git_wh_qty", "next_git_wh_date", "warehouse_stock"]
            )
        print(f"âœ… Updated {len(update_records)} records successfully.")
